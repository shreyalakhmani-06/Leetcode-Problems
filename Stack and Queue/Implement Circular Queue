class MyCircularQueue {
    int k;
    vector<int>queue;
    int front;
    int rear;
public:
    MyCircularQueue(int k) {
        this->k=k;
        queue.resize(k);
        front=-1;
        rear=-1;
    }
    
    bool enQueue(int value) {
        if(front==-1 && rear==-1){
            rear=front=0;
            queue[rear]=value;
            return true;
        }
        else if((rear+1)%k==front){
            return false;
        }
        else{
            rear=(rear+1)%k;
            queue[rear]=value;
            return true;
        }
    }
    
    bool deQueue() {
        if(front==-1 && rear==-1){
            return false;
        }
        else if(front==rear){
            front=rear=-1;
            return true;
        }
        else{
            front=(front+1)%k;
            return true;
        }
    }
    
    int Front() {
        if(front!=-1){
            return queue[front];
        }
        else{
            return -1;
        }
    }
    
    int Rear() {
        if(rear!=-1){
            return queue[rear];
        }
        else{
            return -1;
        }
    }
    
    bool isEmpty() {
        return ((front==-1 && rear==-1));
    }
    
    bool isFull() {
        return((rear+1)%k==front); 
    }
};
